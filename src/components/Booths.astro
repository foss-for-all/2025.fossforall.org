---
const { lang } = Astro.props;
import { renderMarkdown } from "@/lib/utils";
import { WebsiteConfig } from "@/config";
import { createHash } from 'crypto';
import type { Booth, BoothSpeaker } from "@/models/Booth";
import { BoothCardAndModal } from "@/components/BoothCardAndModal";

const config = WebsiteConfig(lang);

// Fetch booths data (speakers in the 2025-call-for-booths event)
const speakersResponse = await fetch(
    `${config.pretalx.baseUrl}/api/events/2025-call-for-booths/speakers/`,
    {
        headers: new Headers({
            Authorization: "Token " + import.meta.env.PRETALX_TOKEN,
        }),
    },
);
const boothSpeakers: BoothSpeaker[] = (await speakersResponse.json())["results"];

// Fetch booths data (submissions in the 2025-call-for-booths event)
const boothsResponse = await fetch(
    `${config.pretalx.baseUrl}/api/events/2025-call-for-booths/submissions/?state=confirmed&state=accepted`,
    {
        headers: new Headers({
            Authorization: "Token " + import.meta.env.PRETALX_TOKEN,
        }),
    },
);

const boothsData = await boothsResponse.json();
let booths: Booth[] = boothsData?.results || [];

// Process markdown in descriptions at build time
if (booths.length > 0) {
    booths = await Promise.all(booths.map(async (booth) => ({
        ...booth,
        abstract: await renderMarkdown(booth.abstract),
        description: await renderMarkdown(booth.description),
        speakerDetails: booth.speakers.map(speakerId =>
            boothSpeakers.find(speaker => speaker.code === speakerId)
        ).filter(Boolean) as BoothSpeaker[],
    })));
}
---

<div class="columns is-multiline">
    {
        booths.map((booth: Booth) => (
            <BoothCardAndModal
                client:load
                booth={booth}
                config={config}
                lang={lang}
                gravatarHashes={booth.speakerDetails?.map(speaker => ({
                    code: speaker.code,
                    hash: createHash("SHA256").update(speaker.email, "utf-8").digest("hex")
                })) || []}
            />
        ))
    }
</div>
